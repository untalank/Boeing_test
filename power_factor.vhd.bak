library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
USE ieee.std_logic_signed.all;

entity power_factor_calc is 

port( 
	input_flag: in std_logic;	
	in_real_power: in unsigned (11 downto 0):=(others => '0') ;
	in_apparent_power: in unsigned (11 downto 0):=(others => '0');	
	power_factor: out unsigned(11 downto 0):=(others => '0')
	);
end entity power_factor_calc;

architecture behavioral of power_factor_calc is 

component div is 
	port( 
	numerator: unsigned(11 downto 0);
	denaminator: unsigned(11 downto 0);
	quotient: out unsigned(11 downto 0)
	);
end component;

signal zero:unsigned(11 downto 0):=(others => '0');

begin
Division_call: div port map(in_real_power,in_apparent_power,power_factor); -- Calling function 
	process(in_real_power,in_apparent_power)
	begin 
  	
	if ( in_apparent_power /= zero) then 
		if (in_real_power /= zero) then 
			--Division_call: div port map(in_real_power,in_apparent_power,power_factor); -- Calling function 
		else 
		power_factor <= zero;
		end if;
	else
	power_factor <= zero;


	end if;
	

	end process;
end architecture behavioral;

